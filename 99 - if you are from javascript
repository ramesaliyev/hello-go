## if you are from javascript

THERE IS
- there is callback mechanism in go
- there is closures in go (and of course functions can return another function (high order functions))
- there is function declaration and expression
- there is variadic argument passing which is like spread operator in js => func(array...) (look funcs in 03-general notes)

THERE IS NO
- there is no hoisting in go
- there is no mixing types, its staticly typing
- there is no default fall-through in switch case (you dont have to use break!), but you can create it!

LIKE
- like javascript functions are first class citizens in go

UNLIKE
- unlike javascript the only way having function inside of another function is function expression

ADDITIONAL
- everything is PASSED BY VALUE in go
- use slices for array purposes instead of arrays