{} - braces, curly braces, curlies, mustaches
[] - brackets
() - parentheses, parens

# so general
- we call casting as convertion in go, for example: []byte("Hello"), convert hello string into byte list
- single quotes are for runes
- double quotes and backticks for strings
- byte is alias for uint8
- rune is alias for int32

# executable
- every executable go program needs main package and main function to start.

# package
- all files that belong to one package, share a package scope. so they can access each other.
- when first letter of an identifier is upper case in a package, it means that identifier is exported and visible outside of the package
- a package is basically is a one folder and multiple files with same package name.
- it's good to use package name as folder name, but not mandatory.

# variables
- shorthand notation can only be used inside functions: (var kamil = 5) or (kamil := 5)
- if you use var and dont assign variable to a value it's going to have "zero value" of it's own kind (0 for int, "" for string... etc.)
- types without zero values will have "nil" as zero value

- declaration: (var b string)
- assignment: (b = "kamil")
- declaration + assignment = initalization: (var b string = "kamil") or (b := "kamil")

# scope (where do i access to a variable)
- levels of scope
-- universe (built-in methods, type names etc.)
-- package (files of a same package can access each other)
-- file (an import only accessible to its own file)
-- block (curly brackets)

# function
- we can return all types from a function

# blank identifier (_)
- allows you to tell the compiler you arent using something

# constants
- untyped constans are named as "kind"
- every literal value is actually a constant, and dont stricly obey rules like "dont mix the types"

# pointers
- & operator gets the memory address of a variable
- pointers are supposed to be assigned to memory addresses, so they points to memory address
- eg:
    a := 43
    var b *int = &a
    // b is a pointer and points to a's memory address
    // we can get the value that sits in that memory address with *b (dereferencing).
    // we can change the value that sits in that memory address with same way.
    *b = 42

# loops
- there is only for loop, but we can use it like while
- we can use break and continue in loop.

# rune
- a character
- an integer value identifying a unicode code point
- for rune we use singlequotes
- rune is an alias for int32 (like byte is an alias for int8)
- utf8 is 4 byte (4*8=32bit = int32) coding scheme
- for example;
    x := 'a' is a rune definition and x has 97 as value
    type of x is int32

# string
- strings are just collections of runes, runes are made of bytes, so strings are made of bytes. so a string is slice of bytes.


# switch
- there is no default fall-through (dont have to use break)
- you can create fall-through with fallthrough keyword in the end of the case statement.
- you can use multiple cases with comma separated
- switch without expression (variable) will resolve to first case that valuates to true
- you can switch by type
    switch x.(type) { // this is an assert
        case int:
            ...
        case string:
            ...
    }

# if
- you can initialize a variable within if statement

# funcs
- main package's main func is the entrypoint of the code
- parameter is what functions declares it needs, argument is what we pass to the function as a parameter.
- variadic function means it can take zero or multiple arguments, final parameter in that function is prefixed with ...
- variadic arguments means passing an list (slice) to a function like passing every item one by one (like .apply in javascript)
- functions is actually a type and type of functions is "func()"
- defer keyword defers execution of function until current function exit

    func <receiver> <name>(<parameters>) <return> { <body> }

    func greet(name string, surname string) == func greet(name, surname string)

    func greet(name, surname string) string { return s
    // we gonna return string

    func greet(name, surname string) (s string) { return
    // we gonna return s and its gonna be string
    // we dont have to say return s. just return

    func greet(name, surname string) (string, string) { return s, a
    // return multiple values

    func average(nums ...float64) float64 {
    // this function is variadic

    data := []float64{43, 56, 75, 12}
    average(data...)
    // this argument is variadic

    greet := func() { ... }
    // function expression with anonymous func
    // only way to have a function inside another function

    func makeGreeter() func() string {
        return func() string {
            return "Hello"
        }
    }
    // this function returns a function which returns string

    func comeon(callback func(int)) {
        callback(1);
    }
    comeon(func (s int) {
        ...
    })
    // taking callback

    func() { ... }()
    // anonymous self-executed function

# make command
- allocates memory for these three reference types: slices, maps and channels

# slice, map, channel
- these types are referenced type types, and they dont holds any value they just reference that values in memory
- everything is PASSED BY VALUE in go, this types also! but because these types dont hold values, its look like these types passed by reference

# array
- if you DO see a number between brackets its an array
- arrays belongs to specific types, arrays can only hold values that belongs to that single type
- actually we dont use array so much in go
- size of an array cant change (not dynamic)
- you can get length of an array with built-in function `len
- its not reference type

    var <name> [<size>]<type>
    var x [50]string

    var multiarr [3][3][3]int
    multiarr[0][0][0] = 1
    // multi-dimensional array

# slice
- if you DONT see a number between brackets its a slice
- it is a reference type
- size of an slice can change (dynamic)
- slices are have underlying arrays
- capacity is size of the underlying array
- length is the actual size of the slice
- if slice exceeds size of the underlying array, computer will throw old array and create new array with the TWICE size
of the original one, and this has performance cost. so its good the set right capacity for our slice.
- its okay to have ending comma in slice definition

    myslice := []string{"a", "b", "c",}
    // its okay to have ending comma

    myslice[2:4]
    myslice[2:]
    myslice[:4]
    myslice[:]
    // slicing a slice, closed by left, open by right

    same := make([]int, 50, 100)
    same := new([100]int)[0:50]
    // same thing

    myslice := make([]int, 0, 5)
    myslice = append(myslice, 1)
    myslice = append(myslice, 2)

    myslice2 := make([]int, 0, 5)
    myslice2 = append(myslice2, myslice...)
    // appending slice to slice

    myslice2 = append(myslice2[:2], myslice2[3:]...)
    // delete from the slice
    // index 2 will be deleted

    records := make([][]string, 0)
    record1 := make([]string, 0)
    records = append(records, record1)
    // multi-dimensional slice
    // you can make it 10 dimension if you want to
    // but you have to create every slice of every dimension (unlike multi-dimension arrays)